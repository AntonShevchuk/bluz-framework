<?php
/**
 * @copyright Bluz PHP Team
 * @link https://github.com/bluzphp/framework
 */

/**
 * @namespace
 */
namespace Bluz\Tests\Db;

use Bluz\Db\Table;
use Bluz\Tests\Fixtures\Db;
use Bluz\Tests\TestCase;

/**
 * Test class for Table.
 * Generated by PHPUnit on 2011-07-27 at 13:52:47.
 */
class TableTest extends TestCase
{
    /**
     * @var Table
     */
    protected $table;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->table = Db\ConcreteTable::getInstance();
    }

    /**
     * testGetInstance
     * @covers \Bluz\Db\Table::getInstance
     */
    public function testGetInstance()
    {
        // test that the method doesn't create new objects
        self::assertSame($this->table, Db\ConcreteTable::getInstance());
        
        // tests that instances are creating separately for each table class
        self::assertEquals(
            'Bluz\Tests\Fixtures\Db\ConcreteTable',
            get_class(Db\ConcreteTable::getInstance())
        );
        self::assertEquals(
            'Bluz\Tests\Fixtures\Db\WrongKeysTable',
            get_class(Db\WrongKeysTable::getInstance())
        );
    }

    /**
     * @expectedException \Bluz\Db\Exception\InvalidPrimaryKeyException
     */
    public function testGetPrimaryKeyException()
    {
        $table = Db\WrongKeysTable::getInstance();
        $table->getPrimaryKey();
    }

    /**
     * Get Primary Key
     */
    public function testGetPrimaryKey()
    {
        $table = Db\ConcreteTable::getInstance();
        self::assertEquals(['bar', 'baz'], $table->getPrimaryKey());
    }

    /**
     * @dataProvider getFindWrongData
     * @expectedException \Bluz\Db\Exception\InvalidPrimaryKeyException
     * @param $keyValues
     */
    public function testFindException($keyValues)
    {
        $this->table->find(...$keyValues);
    }

    /**
     * @return array
     */
    public function getFindWrongData()
    {
        return array(
            [[1]],
            [[1, 2, 3]]
        );
    }

    /**
     * @todo Implement testFind().
     */
    public function testFind()
    {
        if (!class_exists('PDO') || !in_array('sqlite', \PDO::getAvailableDrivers())) {
            self::markTestSkipped('This test requires SQLite support in your environment');
        }
        // Remove the following lines when you implement this test.
        self::markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @todo Implement testInsert().
     */
    public function testInsert()
    {
        // Remove the following lines when you implement this test.
        self::markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @todo Implement testUpdate().
     */
    public function testUpdate()
    {
        // Remove the following lines when you implement this test.
        self::markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete()
    {
        // Remove the following lines when you implement this test.
        self::markTestIncomplete('This test has not been implemented yet.');
    }
}
